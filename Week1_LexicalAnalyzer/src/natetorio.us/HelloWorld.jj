/* Copyright (c) 2019, Nate Bachmeier.
 * All rights reserved.
 * 
 * TIM-8110: Programming Languages and Algorithms
 * NorthCentral University (NCU)
 * 2019.05.05
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(HelloWorld)

/** Simple brace matcher. */
public class HelloWorld {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    HelloWorld parser = new HelloWorld(System.in);
    parser.Input();
  }

}

PARSER_END(HelloWorld)

/**********************
  IGNORE WHITE SPACE
**********************/
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

/**********************
  LITERALS
**********************/
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/**********************
  SEPERATORS
**********************/
TOKEN :{
  <SEMICOLON : ";">
}

/**********************
  RESERVED WORDS
**********************/
TOKEN : {
  <BEGIN_PROG: "BEGIN NCUPL">
  | <END: "END">
  | <OUTPUT: "OUTPUT">
  | <INPUT: "INPUT">
}

/**********************
  STATEMENTS
**********************/

/** Root production. */
void Input() :
{}
{
  <BEGIN_PROG> (<OUTPUT> <STRING_LITERAL> <SEMICOLON>)* <END> <EOF>
}

/** Brace matching production. */
void MatchedBraces() :
{}
{
  "{" [ MatchedBraces() ] "}"
}
